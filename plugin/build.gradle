/*
 * Copyright 2020 TarCV
 * Copyright 2015 Shazam Entertainment Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

buildscript {
    ext.kotlin_version = '1.3.50' // should be the same as in dependencies.gradle
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0"
    }
}

apply plugin: "org.sonarqube"

Closure repos = {
    mavenCentral()
    jcenter()
    google()
}

allprojects {
    buildscript {
        repositories repos
    }
    repositories repos

    apply plugin: "jacoco"

    version = VERSION_NAME
    group = GROUP
}

project(':tongs-ondevice') {
    sonarqube {
        skipProject = true
    }
}
project(':tongs-gradle-plugin') {
    sonarqube {
        skipProject = true
    }
}
subprojects { project ->
    project.afterEvaluate {
        if (plugins.hasPlugin('com.android.library')) {
            project.apply(from: file('publishAndroid.gradle'))
        } else if (plugins.hasPlugin('org.gradle.java')) {
            project.apply(from: file('publish.gradle'))

            task copyPomForCi(type: Sync) {
                dependsOn 'generatePomFileForArtifactPublication'
                from 'build/publications/artifact'
                into "${rootProject.projectDir}/ci/poms/${project.projectDir.name}"
                include 'pom-default.xml'
                rename 'pom-default.xml', 'pom.xml'
            }
        }
    }
}

tasks.register('jacocoMergedReport', JacocoReport.class) { task ->
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each { project ->
        project.plugins.withType(JavaPlugin.class) { javaPlugin ->
            final sourceSets = project.convention.getPlugin(JavaPluginConvention.class).sourceSets
            task.sourceSets(sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME))
        }
    }

    task.reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}
jacocoMergedReport.dependsOn {
    subprojects*.test
}

sonarqube {
    properties {
        property "sonar.projectKey", "TarCV_tongs"
        property "sonar.projectName", "Tongs"
        property "sonar.organization", "tarcv"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
