/*
 * Copyright 2021 TarCV
 * Copyright 2015 Shazam Entertainment Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

plugins {
    id "com.osacky.doctor" version "0.7.0"

    id "org.jetbrains.kotlin.jvm" version "1.3.50" apply(false) // update 'kotlinxCoroutinesCore' below when updating kotlin version here
    id "org.jetbrains.dokka" version "1.4.30" apply(false)

    id 'maven-publish'
    id 'org.sonarqube' version '3.0'
}

Closure repos = {
    mavenCentral()
    jcenter()
    google()
}

ext {
    javaSourceCompatibility = JavaVersion.VERSION_1_8
    javaTargetCompatibility = JavaVersion.VERSION_1_8

    versions = [
            androidTools : '26.5.3',
            androidPlugin: '3.6.0',// should be the same as in buildscripts in the ondevice build.gradle file
            handleBars   : '4.2.0',
            junit        : '4.12',
            jmock        : '2.8.2',
            koin         : '2.1.0'
    ]

    deps = [
            jsr305               : "com.google.code.findbugs:jsr305:3.0.1",
            guava                : "com.google.guava:guava:30.0-jre",
            ddmlib               : "com.android.tools.ddms:ddmlib:${versions.androidTools}",
            sdklib               : "com.android.tools:common:${versions.androidTools}",
            androidToolsCommon   : "com.android.tools:common:${versions.androidTools}",
            commonsLang          : "org.apache.commons:commons-lang3:3.12.0",
            commonsIo            : "commons-io:commons-io:2.8.0",
            handleBars           : "com.github.jknack:handlebars:${versions.handleBars}",
            handleBarsHuminize   : "com.github.jknack:handlebars-humanize:${versions.handleBars}",
            gson                 : 'com.google.code.gson:gson:2.6.2',
            slf4j                : 'org.slf4j:slf4j-log4j12:1.7.21',
            hamcrest             : 'org.hamcrest:hamcrest-all:1.3',
            jmock                : "org.jmock:jmock:${versions.jmock}",
            jcommander           : "com.beust:jcommander:1.48",
            jmockJUnit           : "org.jmock:jmock-junit4:${versions.jmock}",
            junit                : "junit:junit:${versions.junit}",
            junitParams          : 'pl.pragmatists:JUnitParams:1.1.1',
            koin                 : "org.koin:koin-core:${versions.koin}",
            koinTest             : "org.koin:koin-test:${versions.koin}",
            koinJava             : "org.koin:koin-java:2.0.1", // TODO: update to versions.koin once it is released
            kotlinxCoroutinesCore: "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1"
    ]
}

allprojects {
    buildscript {
        repositories repos
    }
    repositories repos

    apply plugin: "jacoco"
    apply plugin: "signing"

    version = VERSION_NAME
    group = GROUP
}

project(':tongs-ondevice') {
    sonarqube {
        skipProject = true
    }
}
project(':tongs-gradle-plugin') {
    sonarqube {
        skipProject = true
    }
}
subprojects { project ->
    project.afterEvaluate {
        if (plugins.hasPlugin('org.gradle.java')) {
            project.apply(from: file('publish.gradle'))

            task copyPomForCi(type: Sync) {
                dependsOn 'generatePomFileForArtifactPublication'
                from 'build/publications/artifact'
                into "${rootProject.projectDir}/ci/poms/${project.projectDir.name}"
                include 'pom-default.xml'
                rename 'pom-default.xml', 'pom.xml'
            }
        }
    }
}

tasks.register('jacocoMergedReport', JacocoReport.class) { task ->
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each { project ->
        project.plugins.withType(JavaPlugin.class) { javaPlugin ->
            final sourceSets = project.convention.getPlugin(JavaPluginConvention.class).sourceSets
            task.sourceSets(sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME))
        }
    }

    task.reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}
jacocoMergedReport.dependsOn {
    subprojects*.test
}

sonarqube {
    properties {
        property "sonar.projectKey", "TarCV_tongs"
        property "sonar.projectName", "Tongs"
        property "sonar.organization", "tarcv"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
